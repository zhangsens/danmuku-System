(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["cDanmaku"] = factory();
	else
		root["cDanmaku"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var canvas = __webpack_require__(1);
var font = __webpack_require__(2);
var danmaku_object = __webpack_require__(3);

var height = 0;
setInterval(function () {
    height = 0;
}, 2000);

var cDanmaku = function () {
    function cDanmaku(option) {
        _classCallCheck(this, cDanmaku);

        this.danmaku_store = new Array();
        //this.danmaku_sort = new Array();
        this.danmaku_video = new Array();
        this.danmaku_speed = 2;
        this.danmaku_played = false;
        this.canvas = option.ele || canvas;
        this.ctx = this.canvas.getContext("2d");
        this.ctx.font = font.weight + " " + font.size + "px " + font.family;
        this.ctx.strokeStyle = "#000000";
        this.ctx.fillStyle = "#ffffff";
        this.ctx.lineWidth = 1;
        this.position_x = this.canvas.width;
        this.media = option.media;
        this.work = new Worker('../dist/webwork.js');
        this.fps = 0;
        this.fps_console();

        if (option.type) {

            this.add_danmaku(option.danmaku);

            this.canvas.addEventListener("mouseup", this.danmaku_search.bind(this));
            this.canvas.addEventListener("contextmenu", function () {
                event.preventDefault();
            });
            this.media.addEventListener("play", function () {
                this.danmaku_played = true;
            }.bind(this));
            this.media.addEventListener("pause", function () {
                this.danmaku_played = false;
            }.bind(this));
        } else {
            this.danmaku_played = true;
        }

        this.work.addEventListener("message", function (e) {
            this.danmaku_video_add(e.data);
        }.bind(this), false);

        this.draw(option.type);
    }

    _createClass(cDanmaku, [{
        key: "add_danmaku",
        value: function add_danmaku(array) {

            this.danmaku_store = this.danmaku_store.concat(array);
            this.danmaku_reset();
        }
    }, {
        key: "danmaku_reset",
        value: function danmaku_reset() {

            this.work.postMessage({
                danmaku: this.danmaku_store,
                type: "data"
            });
        }
    }, {
        key: "danmaku_video_add",
        value: function danmaku_video_add(danmaku) {

            var _danmaku = new Object();
            _danmaku.content = danmaku.content;
            _danmaku.time = danmaku.time;
            _danmaku.position_x = this.position_x;
            _danmaku.position_y = (height + 1) * font.size;
            this.danmaku_video.push(new danmaku_object(_danmaku, font.size));
            this.danmaku_height();
        }
    }, {
        key: "danmaku_input",
        value: function danmaku_input(content) {

            var _danmaku = new Object();

            _danmaku.content = content;
            _danmaku.time = 0;
            _danmaku.position_x = this.position_x;
            _danmaku.position_y = (height + 1) * font.size;

            this.danmaku_video.push(new danmaku_object(_danmaku, font.size));
            this.danmaku_height();
        }
    }, {
        key: "danmaku_height",
        value: function danmaku_height() {

            if (height > this.canvas.height) {
                height = 0;
            } else {
                height++;
            }
        }
    }, {
        key: "danmaku_search",
        value: function danmaku_search(e) {

            if (e.button == 2) {

                var x = e.offsetX;
                var y = e.offsetY;
                var _search;

                for (var i = this.danmaku_video.length - 1; i >= 0; i--) {
                    if (x - this.danmaku_video[i].position_x > 0 && x - this.danmaku_video[i].position_x < this.danmaku_video[i].content.length * font.size && this.danmaku_video[i].position_y - y > 0 && this.danmaku_video[i].position_y - y < font.size) {
                        _search = this.danmaku_video[i];
                        break;
                    }
                }

                if (_search) {

                    for (var _i = 0; _i < this.danmaku_store.length; _i++) {

                        if (this.danmaku_store[_i].time == _search.time && this.danmaku_store[_i].content == _search.content) {
                            var index = this.danmaku_store.indexOf(this.danmaku_store[_i]);
                            console.log(this.danmaku_store[index]);
                        }
                    }
                }
                console.log("end");
            }
        }
    }, {
        key: "danmaku_animation",
        value: function danmaku_animation() {

            //this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

            for (var i = 0; i < this.danmaku_video.length; i++) {
                this.ctx.fillText(this.danmaku_video[i].content, this.danmaku_video[i].position_x, this.danmaku_video[i].position_y);
                this.ctx.strokeText(this.danmaku_video[i].content, this.danmaku_video[i].position_x, this.danmaku_video[i].position_y);
                this.danmaku_video[i].position_x -= this.danmaku_speed;
                if (this.danmaku_video[i].position_x < -this.danmaku_video[i].length) {
                    this.danmaku_video.splice(i, 1);
                    i--;
                }
            }
        }
    }, {
        key: "webwork_post",
        value: function webwork_post(vTime) {

            this.work.postMessage({
                time: vTime,
                type: "time"
            });
        }
    }, {
        key: "draw",
        value: function draw(type) {

            this.fps++;

            if (this.danmaku_played) {
                this.danmaku_animation();
                this.webwork_post(this.media.currentTime);
            }

            requestAnimationFrame(this.draw.bind(this, type));
        }
    }, {
        key: "fps_console",
        value: function fps_console() {
            var _this = this;

            //性能测试
            setInterval(function () {
                console.log("\u5E27\u6570\uFF1A" + _this.fps);
                _this.fps = 0;
            }, 1000);
        }
    }]);

    return cDanmaku;
}();

module.exports = cDanmaku;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var canvas = document.createElement("canvas");

module.exports = canvas;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var font = {
    style: "normal",
    variant: "normal",
    weight: "900",
    family: "SimHei",
    size: 30
};

module.exports = font;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function danmaku_object(option, font) {

    this.content = option.content;
    this.time = option.time;
    this.position_x = option.position_x;
    this.position_y = option.position_y;
    this.length = this.content.length * font;
}

module.exports = danmaku_object;

/***/ })
/******/ ]);
});